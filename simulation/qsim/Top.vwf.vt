// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/12/2024 16:00:48"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Top
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Top_vlg_sample_tst(
	clk,
	Data_in,
	start,
	sampler_tx
);
input  clk;
input [7:0] Data_in;
input  start;
output sampler_tx;

reg sample;
time current_time;
always @(clk or Data_in or start)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Top_vlg_check_tst (
	done,
	Q0,
	Q1,
	Q2,
	Q3,
	Q4,
	sampler_rx
);
input  done;
input [7:0] Q0;
input [7:0] Q1;
input [7:0] Q2;
input [7:0] Q3;
input [7:0] Q4;
input sampler_rx;

reg  done_expected;
reg [7:0] Q0_expected;
reg [7:0] Q1_expected;
reg [7:0] Q2_expected;
reg [7:0] Q3_expected;
reg [7:0] Q4_expected;

reg  done_prev;
reg [7:0] Q0_prev;
reg [7:0] Q1_prev;
reg [7:0] Q2_prev;
reg [7:0] Q3_prev;
reg [7:0] Q4_prev;

reg  done_expected_prev;
reg [7:0] Q0_expected_prev;
reg [7:0] Q1_expected_prev;
reg [7:0] Q2_expected_prev;
reg [7:0] Q3_expected_prev;
reg [7:0] Q4_expected_prev;

reg  last_done_exp;
reg [7:0] last_Q0_exp;
reg [7:0] last_Q1_exp;
reg [7:0] last_Q2_exp;
reg [7:0] last_Q3_exp;
reg [7:0] last_Q4_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	done_prev = done;
	Q0_prev = Q0;
	Q1_prev = Q1;
	Q2_prev = Q2;
	Q3_prev = Q3;
	Q4_prev = Q4;
end

// update expected /o prevs

always @(trigger)
begin
	done_expected_prev = done_expected;
	Q0_expected_prev = Q0_expected;
	Q1_expected_prev = Q1_expected;
	Q2_expected_prev = Q2_expected;
	Q3_expected_prev = Q3_expected;
	Q4_expected_prev = Q4_expected;
end


// expected Q0[ 7 ]
initial
begin
	Q0_expected[7] = 1'bX;
	Q0_expected[7] = #999000 1'b0;
end 
// expected Q0[ 6 ]
initial
begin
	Q0_expected[6] = 1'bX;
	Q0_expected[6] = #999000 1'b0;
end 
// expected Q0[ 5 ]
initial
begin
	Q0_expected[5] = 1'bX;
	Q0_expected[5] = #999000 1'b0;
end 
// expected Q0[ 4 ]
initial
begin
	Q0_expected[4] = 1'bX;
	Q0_expected[4] = #999000 1'b0;
end 
// expected Q0[ 3 ]
initial
begin
	Q0_expected[3] = 1'bX;
	Q0_expected[3] = #999000 1'b0;
end 
// expected Q0[ 2 ]
initial
begin
	Q0_expected[2] = 1'bX;
	Q0_expected[2] = #999000 1'b0;
end 
// expected Q0[ 1 ]
initial
begin
	Q0_expected[1] = 1'bX;
	Q0_expected[1] = #999000 1'b0;
end 
// expected Q0[ 0 ]
initial
begin
	Q0_expected[0] = 1'bX;
	Q0_expected[0] = #999000 1'b0;
end 
// expected Q1[ 7 ]
initial
begin
	Q1_expected[7] = 1'bX;
	Q1_expected[7] = #999000 1'b0;
end 
// expected Q1[ 6 ]
initial
begin
	Q1_expected[6] = 1'bX;
	Q1_expected[6] = #999000 1'b0;
end 
// expected Q1[ 5 ]
initial
begin
	Q1_expected[5] = 1'bX;
	Q1_expected[5] = #999000 1'b0;
end 
// expected Q1[ 4 ]
initial
begin
	Q1_expected[4] = 1'bX;
	Q1_expected[4] = #999000 1'b0;
end 
// expected Q1[ 3 ]
initial
begin
	Q1_expected[3] = 1'bX;
	Q1_expected[3] = #999000 1'b0;
end 
// expected Q1[ 2 ]
initial
begin
	Q1_expected[2] = 1'bX;
	Q1_expected[2] = #999000 1'b0;
end 
// expected Q1[ 1 ]
initial
begin
	Q1_expected[1] = 1'bX;
	Q1_expected[1] = #999000 1'b0;
end 
// expected Q1[ 0 ]
initial
begin
	Q1_expected[0] = 1'bX;
	Q1_expected[0] = #999000 1'b0;
end 
// expected Q2[ 7 ]
initial
begin
	Q2_expected[7] = 1'bX;
	Q2_expected[7] = #999000 1'b0;
end 
// expected Q2[ 6 ]
initial
begin
	Q2_expected[6] = 1'bX;
	Q2_expected[6] = #999000 1'b0;
end 
// expected Q2[ 5 ]
initial
begin
	Q2_expected[5] = 1'bX;
	Q2_expected[5] = #999000 1'b0;
end 
// expected Q2[ 4 ]
initial
begin
	Q2_expected[4] = 1'bX;
	Q2_expected[4] = #999000 1'b0;
end 
// expected Q2[ 3 ]
initial
begin
	Q2_expected[3] = 1'bX;
	Q2_expected[3] = #999000 1'b0;
end 
// expected Q2[ 2 ]
initial
begin
	Q2_expected[2] = 1'bX;
	Q2_expected[2] = #999000 1'b0;
end 
// expected Q2[ 1 ]
initial
begin
	Q2_expected[1] = 1'bX;
	Q2_expected[1] = #999000 1'b0;
end 
// expected Q2[ 0 ]
initial
begin
	Q2_expected[0] = 1'bX;
	Q2_expected[0] = #999000 1'b0;
end 
// expected Q3[ 7 ]
initial
begin
	Q3_expected[7] = 1'bX;
	Q3_expected[7] = #999000 1'b0;
end 
// expected Q3[ 6 ]
initial
begin
	Q3_expected[6] = 1'bX;
	Q3_expected[6] = #999000 1'b0;
end 
// expected Q3[ 5 ]
initial
begin
	Q3_expected[5] = 1'bX;
	Q3_expected[5] = #999000 1'b0;
end 
// expected Q3[ 4 ]
initial
begin
	Q3_expected[4] = 1'bX;
	Q3_expected[4] = #999000 1'b0;
end 
// expected Q3[ 3 ]
initial
begin
	Q3_expected[3] = 1'bX;
	Q3_expected[3] = #999000 1'b0;
end 
// expected Q3[ 2 ]
initial
begin
	Q3_expected[2] = 1'bX;
	Q3_expected[2] = #999000 1'b0;
end 
// expected Q3[ 1 ]
initial
begin
	Q3_expected[1] = 1'bX;
	Q3_expected[1] = #999000 1'b0;
end 
// expected Q3[ 0 ]
initial
begin
	Q3_expected[0] = 1'bX;
	Q3_expected[0] = #999000 1'b0;
end 
// expected Q4[ 7 ]
initial
begin
	Q4_expected[7] = 1'bX;
	Q4_expected[7] = #999000 1'b0;
end 
// expected Q4[ 6 ]
initial
begin
	Q4_expected[6] = 1'bX;
	Q4_expected[6] = #999000 1'b0;
end 
// expected Q4[ 5 ]
initial
begin
	Q4_expected[5] = 1'bX;
	Q4_expected[5] = #999000 1'b0;
end 
// expected Q4[ 4 ]
initial
begin
	Q4_expected[4] = 1'bX;
	Q4_expected[4] = #999000 1'b0;
end 
// expected Q4[ 3 ]
initial
begin
	Q4_expected[3] = 1'bX;
	Q4_expected[3] = #999000 1'b0;
end 
// expected Q4[ 2 ]
initial
begin
	Q4_expected[2] = 1'bX;
	Q4_expected[2] = #999000 1'b0;
end 
// expected Q4[ 1 ]
initial
begin
	Q4_expected[1] = 1'bX;
	Q4_expected[1] = #999000 1'b0;
end 
// expected Q4[ 0 ]
initial
begin
	Q4_expected[0] = 1'bX;
	Q4_expected[0] = #999000 1'b0;
end 

// expected done
initial
begin
	done_expected = 1'bX;
end 
// generate trigger
always @(done_expected or done or Q0_expected or Q0 or Q1_expected or Q1 or Q2_expected or Q2 or Q3_expected or Q3 or Q4_expected or Q4)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected done = %b | expected Q0 = %b | expected Q1 = %b | expected Q2 = %b | expected Q3 = %b | expected Q4 = %b | ",done_expected_prev,Q0_expected_prev,Q1_expected_prev,Q2_expected_prev,Q3_expected_prev,Q4_expected_prev);
	$display("| real done = %b | real Q0 = %b | real Q1 = %b | real Q2 = %b | real Q3 = %b | real Q4 = %b | ",done_prev,Q0_prev,Q1_prev,Q2_prev,Q3_prev,Q4_prev);
`endif
	if (
		( done_expected_prev !== 1'bx ) && ( done_prev !== done_expected_prev )
		&& ((done_expected_prev !== last_done_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port done :: @time = %t",  $realtime);
		$display ("     Expected value = %b", done_expected_prev);
		$display ("     Real value = %b", done_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_done_exp = done_expected_prev;
	end
	if (
		( Q0_expected_prev[0] !== 1'bx ) && ( Q0_prev[0] !== Q0_expected_prev[0] )
		&& ((Q0_expected_prev[0] !== last_Q0_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q0_expected_prev);
		$display ("     Real value = %b", Q0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q0_exp[0] = Q0_expected_prev[0];
	end
	if (
		( Q0_expected_prev[1] !== 1'bx ) && ( Q0_prev[1] !== Q0_expected_prev[1] )
		&& ((Q0_expected_prev[1] !== last_Q0_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q0_expected_prev);
		$display ("     Real value = %b", Q0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q0_exp[1] = Q0_expected_prev[1];
	end
	if (
		( Q0_expected_prev[2] !== 1'bx ) && ( Q0_prev[2] !== Q0_expected_prev[2] )
		&& ((Q0_expected_prev[2] !== last_Q0_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q0_expected_prev);
		$display ("     Real value = %b", Q0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q0_exp[2] = Q0_expected_prev[2];
	end
	if (
		( Q0_expected_prev[3] !== 1'bx ) && ( Q0_prev[3] !== Q0_expected_prev[3] )
		&& ((Q0_expected_prev[3] !== last_Q0_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q0_expected_prev);
		$display ("     Real value = %b", Q0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q0_exp[3] = Q0_expected_prev[3];
	end
	if (
		( Q0_expected_prev[4] !== 1'bx ) && ( Q0_prev[4] !== Q0_expected_prev[4] )
		&& ((Q0_expected_prev[4] !== last_Q0_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q0_expected_prev);
		$display ("     Real value = %b", Q0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q0_exp[4] = Q0_expected_prev[4];
	end
	if (
		( Q0_expected_prev[5] !== 1'bx ) && ( Q0_prev[5] !== Q0_expected_prev[5] )
		&& ((Q0_expected_prev[5] !== last_Q0_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q0_expected_prev);
		$display ("     Real value = %b", Q0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q0_exp[5] = Q0_expected_prev[5];
	end
	if (
		( Q0_expected_prev[6] !== 1'bx ) && ( Q0_prev[6] !== Q0_expected_prev[6] )
		&& ((Q0_expected_prev[6] !== last_Q0_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q0_expected_prev);
		$display ("     Real value = %b", Q0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q0_exp[6] = Q0_expected_prev[6];
	end
	if (
		( Q0_expected_prev[7] !== 1'bx ) && ( Q0_prev[7] !== Q0_expected_prev[7] )
		&& ((Q0_expected_prev[7] !== last_Q0_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q0_expected_prev);
		$display ("     Real value = %b", Q0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q0_exp[7] = Q0_expected_prev[7];
	end
	if (
		( Q1_expected_prev[0] !== 1'bx ) && ( Q1_prev[0] !== Q1_expected_prev[0] )
		&& ((Q1_expected_prev[0] !== last_Q1_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_expected_prev);
		$display ("     Real value = %b", Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Q1_exp[0] = Q1_expected_prev[0];
	end
	if (
		( Q1_expected_prev[1] !== 1'bx ) && ( Q1_prev[1] !== Q1_expected_prev[1] )
		&& ((Q1_expected_prev[1] !== last_Q1_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_expected_prev);
		$display ("     Real value = %b", Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Q1_exp[1] = Q1_expected_prev[1];
	end
	if (
		( Q1_expected_prev[2] !== 1'bx ) && ( Q1_prev[2] !== Q1_expected_prev[2] )
		&& ((Q1_expected_prev[2] !== last_Q1_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_expected_prev);
		$display ("     Real value = %b", Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Q1_exp[2] = Q1_expected_prev[2];
	end
	if (
		( Q1_expected_prev[3] !== 1'bx ) && ( Q1_prev[3] !== Q1_expected_prev[3] )
		&& ((Q1_expected_prev[3] !== last_Q1_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_expected_prev);
		$display ("     Real value = %b", Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Q1_exp[3] = Q1_expected_prev[3];
	end
	if (
		( Q1_expected_prev[4] !== 1'bx ) && ( Q1_prev[4] !== Q1_expected_prev[4] )
		&& ((Q1_expected_prev[4] !== last_Q1_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_expected_prev);
		$display ("     Real value = %b", Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Q1_exp[4] = Q1_expected_prev[4];
	end
	if (
		( Q1_expected_prev[5] !== 1'bx ) && ( Q1_prev[5] !== Q1_expected_prev[5] )
		&& ((Q1_expected_prev[5] !== last_Q1_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_expected_prev);
		$display ("     Real value = %b", Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Q1_exp[5] = Q1_expected_prev[5];
	end
	if (
		( Q1_expected_prev[6] !== 1'bx ) && ( Q1_prev[6] !== Q1_expected_prev[6] )
		&& ((Q1_expected_prev[6] !== last_Q1_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_expected_prev);
		$display ("     Real value = %b", Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Q1_exp[6] = Q1_expected_prev[6];
	end
	if (
		( Q1_expected_prev[7] !== 1'bx ) && ( Q1_prev[7] !== Q1_expected_prev[7] )
		&& ((Q1_expected_prev[7] !== last_Q1_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_expected_prev);
		$display ("     Real value = %b", Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Q1_exp[7] = Q1_expected_prev[7];
	end
	if (
		( Q2_expected_prev[0] !== 1'bx ) && ( Q2_prev[0] !== Q2_expected_prev[0] )
		&& ((Q2_expected_prev[0] !== last_Q2_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2_expected_prev);
		$display ("     Real value = %b", Q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q2_exp[0] = Q2_expected_prev[0];
	end
	if (
		( Q2_expected_prev[1] !== 1'bx ) && ( Q2_prev[1] !== Q2_expected_prev[1] )
		&& ((Q2_expected_prev[1] !== last_Q2_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2_expected_prev);
		$display ("     Real value = %b", Q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q2_exp[1] = Q2_expected_prev[1];
	end
	if (
		( Q2_expected_prev[2] !== 1'bx ) && ( Q2_prev[2] !== Q2_expected_prev[2] )
		&& ((Q2_expected_prev[2] !== last_Q2_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2_expected_prev);
		$display ("     Real value = %b", Q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q2_exp[2] = Q2_expected_prev[2];
	end
	if (
		( Q2_expected_prev[3] !== 1'bx ) && ( Q2_prev[3] !== Q2_expected_prev[3] )
		&& ((Q2_expected_prev[3] !== last_Q2_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2_expected_prev);
		$display ("     Real value = %b", Q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q2_exp[3] = Q2_expected_prev[3];
	end
	if (
		( Q2_expected_prev[4] !== 1'bx ) && ( Q2_prev[4] !== Q2_expected_prev[4] )
		&& ((Q2_expected_prev[4] !== last_Q2_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2_expected_prev);
		$display ("     Real value = %b", Q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q2_exp[4] = Q2_expected_prev[4];
	end
	if (
		( Q2_expected_prev[5] !== 1'bx ) && ( Q2_prev[5] !== Q2_expected_prev[5] )
		&& ((Q2_expected_prev[5] !== last_Q2_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2_expected_prev);
		$display ("     Real value = %b", Q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q2_exp[5] = Q2_expected_prev[5];
	end
	if (
		( Q2_expected_prev[6] !== 1'bx ) && ( Q2_prev[6] !== Q2_expected_prev[6] )
		&& ((Q2_expected_prev[6] !== last_Q2_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2_expected_prev);
		$display ("     Real value = %b", Q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q2_exp[6] = Q2_expected_prev[6];
	end
	if (
		( Q2_expected_prev[7] !== 1'bx ) && ( Q2_prev[7] !== Q2_expected_prev[7] )
		&& ((Q2_expected_prev[7] !== last_Q2_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2_expected_prev);
		$display ("     Real value = %b", Q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q2_exp[7] = Q2_expected_prev[7];
	end
	if (
		( Q3_expected_prev[0] !== 1'bx ) && ( Q3_prev[0] !== Q3_expected_prev[0] )
		&& ((Q3_expected_prev[0] !== last_Q3_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q3_expected_prev);
		$display ("     Real value = %b", Q3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Q3_exp[0] = Q3_expected_prev[0];
	end
	if (
		( Q3_expected_prev[1] !== 1'bx ) && ( Q3_prev[1] !== Q3_expected_prev[1] )
		&& ((Q3_expected_prev[1] !== last_Q3_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q3_expected_prev);
		$display ("     Real value = %b", Q3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Q3_exp[1] = Q3_expected_prev[1];
	end
	if (
		( Q3_expected_prev[2] !== 1'bx ) && ( Q3_prev[2] !== Q3_expected_prev[2] )
		&& ((Q3_expected_prev[2] !== last_Q3_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q3_expected_prev);
		$display ("     Real value = %b", Q3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Q3_exp[2] = Q3_expected_prev[2];
	end
	if (
		( Q3_expected_prev[3] !== 1'bx ) && ( Q3_prev[3] !== Q3_expected_prev[3] )
		&& ((Q3_expected_prev[3] !== last_Q3_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q3_expected_prev);
		$display ("     Real value = %b", Q3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Q3_exp[3] = Q3_expected_prev[3];
	end
	if (
		( Q3_expected_prev[4] !== 1'bx ) && ( Q3_prev[4] !== Q3_expected_prev[4] )
		&& ((Q3_expected_prev[4] !== last_Q3_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q3_expected_prev);
		$display ("     Real value = %b", Q3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Q3_exp[4] = Q3_expected_prev[4];
	end
	if (
		( Q3_expected_prev[5] !== 1'bx ) && ( Q3_prev[5] !== Q3_expected_prev[5] )
		&& ((Q3_expected_prev[5] !== last_Q3_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q3_expected_prev);
		$display ("     Real value = %b", Q3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Q3_exp[5] = Q3_expected_prev[5];
	end
	if (
		( Q3_expected_prev[6] !== 1'bx ) && ( Q3_prev[6] !== Q3_expected_prev[6] )
		&& ((Q3_expected_prev[6] !== last_Q3_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q3_expected_prev);
		$display ("     Real value = %b", Q3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Q3_exp[6] = Q3_expected_prev[6];
	end
	if (
		( Q3_expected_prev[7] !== 1'bx ) && ( Q3_prev[7] !== Q3_expected_prev[7] )
		&& ((Q3_expected_prev[7] !== last_Q3_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q3_expected_prev);
		$display ("     Real value = %b", Q3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Q3_exp[7] = Q3_expected_prev[7];
	end
	if (
		( Q4_expected_prev[0] !== 1'bx ) && ( Q4_prev[0] !== Q4_expected_prev[0] )
		&& ((Q4_expected_prev[0] !== last_Q4_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q4_expected_prev);
		$display ("     Real value = %b", Q4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Q4_exp[0] = Q4_expected_prev[0];
	end
	if (
		( Q4_expected_prev[1] !== 1'bx ) && ( Q4_prev[1] !== Q4_expected_prev[1] )
		&& ((Q4_expected_prev[1] !== last_Q4_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q4_expected_prev);
		$display ("     Real value = %b", Q4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Q4_exp[1] = Q4_expected_prev[1];
	end
	if (
		( Q4_expected_prev[2] !== 1'bx ) && ( Q4_prev[2] !== Q4_expected_prev[2] )
		&& ((Q4_expected_prev[2] !== last_Q4_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q4_expected_prev);
		$display ("     Real value = %b", Q4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Q4_exp[2] = Q4_expected_prev[2];
	end
	if (
		( Q4_expected_prev[3] !== 1'bx ) && ( Q4_prev[3] !== Q4_expected_prev[3] )
		&& ((Q4_expected_prev[3] !== last_Q4_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q4_expected_prev);
		$display ("     Real value = %b", Q4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Q4_exp[3] = Q4_expected_prev[3];
	end
	if (
		( Q4_expected_prev[4] !== 1'bx ) && ( Q4_prev[4] !== Q4_expected_prev[4] )
		&& ((Q4_expected_prev[4] !== last_Q4_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q4_expected_prev);
		$display ("     Real value = %b", Q4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Q4_exp[4] = Q4_expected_prev[4];
	end
	if (
		( Q4_expected_prev[5] !== 1'bx ) && ( Q4_prev[5] !== Q4_expected_prev[5] )
		&& ((Q4_expected_prev[5] !== last_Q4_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q4_expected_prev);
		$display ("     Real value = %b", Q4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Q4_exp[5] = Q4_expected_prev[5];
	end
	if (
		( Q4_expected_prev[6] !== 1'bx ) && ( Q4_prev[6] !== Q4_expected_prev[6] )
		&& ((Q4_expected_prev[6] !== last_Q4_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q4_expected_prev);
		$display ("     Real value = %b", Q4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Q4_exp[6] = Q4_expected_prev[6];
	end
	if (
		( Q4_expected_prev[7] !== 1'bx ) && ( Q4_prev[7] !== Q4_expected_prev[7] )
		&& ((Q4_expected_prev[7] !== last_Q4_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q4[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q4_expected_prev);
		$display ("     Real value = %b", Q4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Q4_exp[7] = Q4_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#3000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Top_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] Data_in;
reg start;
// wires                                               
wire done;
wire [7:0] Q0;
wire [7:0] Q1;
wire [7:0] Q2;
wire [7:0] Q3;
wire [7:0] Q4;

wire sampler;                             

// assign statements (if any)                          
Top i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.Data_in(Data_in),
	.done(done),
	.Q0(Q0),
	.Q1(Q1),
	.Q2(Q2),
	.Q3(Q3),
	.Q4(Q4),
	.start(start)
);

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 
// Data_in[ 7 ]
initial
begin
	Data_in[7] = 1'b0;
	Data_in[7] = #60000 1'b1;
	Data_in[7] = #40000 1'b0;
	Data_in[7] = #40000 1'b1;
	Data_in[7] = #80000 1'b0;
end 
// Data_in[ 6 ]
initial
begin
	Data_in[6] = 1'b0;
	Data_in[6] = #20000 1'b1;
	Data_in[6] = #40000 1'b0;
	Data_in[6] = #80000 1'b1;
	Data_in[6] = #40000 1'b0;
end 
// Data_in[ 5 ]
initial
begin
	Data_in[5] = 1'b0;
	Data_in[5] = #140000 1'b1;
	Data_in[5] = #40000 1'b0;
end 
// Data_in[ 4 ]
initial
begin
	Data_in[4] = 1'b0;
	Data_in[4] = #60000 1'b1;
	Data_in[4] = #120000 1'b0;
end 
// Data_in[ 3 ]
initial
begin
	Data_in[3] = 1'b0;
	Data_in[3] = #20000 1'b1;
	Data_in[3] = #80000 1'b0;
	Data_in[3] = #40000 1'b1;
	Data_in[3] = #80000 1'b0;
end 
// Data_in[ 2 ]
initial
begin
	Data_in[2] = 1'b0;
	Data_in[2] = #60000 1'b1;
	Data_in[2] = #80000 1'b0;
	Data_in[2] = #40000 1'b1;
	Data_in[2] = #40000 1'b0;
end 
// Data_in[ 1 ]
initial
begin
	Data_in[1] = 1'b0;
	Data_in[1] = #60000 1'b1;
	Data_in[1] = #80000 1'b0;
	Data_in[1] = #40000 1'b1;
	Data_in[1] = #40000 1'b0;
end 
// Data_in[ 0 ]
initial
begin
	Data_in[0] = 1'b0;
	Data_in[0] = #140000 1'b1;
	Data_in[0] = #80000 1'b0;
end 

// start
initial
begin
	start = 1'b0;
	start = #20000 1'b1;
	start = #40000 1'b0;
end 

Top_vlg_sample_tst tb_sample (
	.clk(clk),
	.Data_in(Data_in),
	.start(start),
	.sampler_tx(sampler)
);

Top_vlg_check_tst tb_out(
	.done(done),
	.Q0(Q0),
	.Q1(Q1),
	.Q2(Q2),
	.Q3(Q3),
	.Q4(Q4),
	.sampler_rx(sampler)
);
endmodule

