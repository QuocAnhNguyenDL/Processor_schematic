// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/11/2024 05:19:01"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Top
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Top_vlg_sample_tst(
	clk,
	Data_in,
	sampler_tx
);
input  clk;
input [7:0] Data_in;
output sampler_tx;

reg sample;
time current_time;
always @(clk or Data_in)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Top_vlg_check_tst (
	addr_mem,
	Addr_plus,
	base,
	control_signal,
	less,
	Q0,
	Q1,
	Q2,
	Q3,
	Q4,
	Q5,
	Q6,
	Q7,
	RA1,
	RA2,
	t0,
	t1,
	WA,
	sampler_rx
);
input [7:0] addr_mem;
input [7:0] Addr_plus;
input [7:0] base;
input [7:0] control_signal;
input  less;
input [7:0] Q0;
input [7:0] Q1;
input [7:0] Q2;
input [7:0] Q3;
input [7:0] Q4;
input [7:0] Q5;
input [7:0] Q6;
input [7:0] Q7;
input [1:0] RA1;
input [1:0] RA2;
input [7:0] t0;
input [7:0] t1;
input [1:0] WA;
input sampler_rx;

reg [7:0] addr_mem_expected;
reg [7:0] Addr_plus_expected;
reg [7:0] base_expected;
reg [7:0] control_signal_expected;
reg  less_expected;
reg [7:0] Q0_expected;
reg [7:0] Q1_expected;
reg [7:0] Q2_expected;
reg [7:0] Q3_expected;
reg [7:0] Q4_expected;
reg [7:0] Q5_expected;
reg [7:0] Q6_expected;
reg [7:0] Q7_expected;
reg [1:0] RA1_expected;
reg [1:0] RA2_expected;
reg [7:0] t0_expected;
reg [7:0] t1_expected;
reg [1:0] WA_expected;

reg [7:0] addr_mem_prev;
reg [7:0] Addr_plus_prev;
reg [7:0] base_prev;
reg [7:0] control_signal_prev;
reg  less_prev;
reg [7:0] Q0_prev;
reg [7:0] Q1_prev;
reg [7:0] Q2_prev;
reg [7:0] Q3_prev;
reg [7:0] Q4_prev;
reg [7:0] Q5_prev;
reg [7:0] Q6_prev;
reg [7:0] Q7_prev;
reg [1:0] RA1_prev;
reg [1:0] RA2_prev;
reg [7:0] t0_prev;
reg [7:0] t1_prev;
reg [1:0] WA_prev;

reg [7:0] Addr_plus_expected_prev;
reg [7:0] control_signal_expected_prev;
reg  less_expected_prev;
reg [7:0] Q0_expected_prev;
reg [7:0] Q1_expected_prev;
reg [7:0] Q2_expected_prev;
reg [7:0] Q3_expected_prev;
reg [7:0] Q4_expected_prev;
reg [7:0] Q5_expected_prev;
reg [7:0] Q6_expected_prev;
reg [7:0] Q7_expected_prev;
reg [1:0] RA1_expected_prev;
reg [1:0] RA2_expected_prev;
reg [7:0] t0_expected_prev;
reg [7:0] t1_expected_prev;
reg [1:0] WA_expected_prev;

reg [7:0] last_Addr_plus_exp;
reg [7:0] last_control_signal_exp;
reg  last_less_exp;
reg [7:0] last_Q0_exp;
reg [7:0] last_Q1_exp;
reg [7:0] last_Q2_exp;
reg [7:0] last_Q3_exp;
reg [7:0] last_Q4_exp;
reg [7:0] last_Q5_exp;
reg [7:0] last_Q6_exp;
reg [7:0] last_Q7_exp;
reg [1:0] last_RA1_exp;
reg [1:0] last_RA2_exp;
reg [7:0] last_t0_exp;
reg [7:0] last_t1_exp;
reg [1:0] last_WA_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:18] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 18'b1;
end

// update real /o prevs

always @(trigger)
begin
	addr_mem_prev = addr_mem;
	Addr_plus_prev = Addr_plus;
	base_prev = base;
	control_signal_prev = control_signal;
	less_prev = less;
	Q0_prev = Q0;
	Q1_prev = Q1;
	Q2_prev = Q2;
	Q3_prev = Q3;
	Q4_prev = Q4;
	Q5_prev = Q5;
	Q6_prev = Q6;
	Q7_prev = Q7;
	RA1_prev = RA1;
	RA2_prev = RA2;
	t0_prev = t0;
	t1_prev = t1;
	WA_prev = WA;
end

// update expected /o prevs

always @(trigger)
begin
	Addr_plus_expected_prev = Addr_plus_expected;
	control_signal_expected_prev = control_signal_expected;
	less_expected_prev = less_expected;
	Q0_expected_prev = Q0_expected;
	Q1_expected_prev = Q1_expected;
	Q2_expected_prev = Q2_expected;
	Q3_expected_prev = Q3_expected;
	Q4_expected_prev = Q4_expected;
	Q5_expected_prev = Q5_expected;
	Q6_expected_prev = Q6_expected;
	Q7_expected_prev = Q7_expected;
	RA1_expected_prev = RA1_expected;
	RA2_expected_prev = RA2_expected;
	t0_expected_prev = t0_expected;
	t1_expected_prev = t1_expected;
	WA_expected_prev = WA_expected;
end


// expected Q0[ 7 ]
initial
begin
	Q0_expected[7] = 1'bX;
end 
// expected Q0[ 6 ]
initial
begin
	Q0_expected[6] = 1'bX;
end 
// expected Q0[ 5 ]
initial
begin
	Q0_expected[5] = 1'bX;
end 
// expected Q0[ 4 ]
initial
begin
	Q0_expected[4] = 1'bX;
end 
// expected Q0[ 3 ]
initial
begin
	Q0_expected[3] = 1'bX;
end 
// expected Q0[ 2 ]
initial
begin
	Q0_expected[2] = 1'bX;
end 
// expected Q0[ 1 ]
initial
begin
	Q0_expected[1] = 1'bX;
end 
// expected Q0[ 0 ]
initial
begin
	Q0_expected[0] = 1'bX;
end 
// expected Q1[ 7 ]
initial
begin
	Q1_expected[7] = 1'bX;
end 
// expected Q1[ 6 ]
initial
begin
	Q1_expected[6] = 1'bX;
end 
// expected Q1[ 5 ]
initial
begin
	Q1_expected[5] = 1'bX;
end 
// expected Q1[ 4 ]
initial
begin
	Q1_expected[4] = 1'bX;
end 
// expected Q1[ 3 ]
initial
begin
	Q1_expected[3] = 1'bX;
end 
// expected Q1[ 2 ]
initial
begin
	Q1_expected[2] = 1'bX;
end 
// expected Q1[ 1 ]
initial
begin
	Q1_expected[1] = 1'bX;
end 
// expected Q1[ 0 ]
initial
begin
	Q1_expected[0] = 1'bX;
end 
// expected Q2[ 7 ]
initial
begin
	Q2_expected[7] = 1'bX;
end 
// expected Q2[ 6 ]
initial
begin
	Q2_expected[6] = 1'bX;
end 
// expected Q2[ 5 ]
initial
begin
	Q2_expected[5] = 1'bX;
end 
// expected Q2[ 4 ]
initial
begin
	Q2_expected[4] = 1'bX;
end 
// expected Q2[ 3 ]
initial
begin
	Q2_expected[3] = 1'bX;
end 
// expected Q2[ 2 ]
initial
begin
	Q2_expected[2] = 1'bX;
end 
// expected Q2[ 1 ]
initial
begin
	Q2_expected[1] = 1'bX;
end 
// expected Q2[ 0 ]
initial
begin
	Q2_expected[0] = 1'bX;
end 
// expected Q3[ 7 ]
initial
begin
	Q3_expected[7] = 1'bX;
end 
// expected Q3[ 6 ]
initial
begin
	Q3_expected[6] = 1'bX;
end 
// expected Q3[ 5 ]
initial
begin
	Q3_expected[5] = 1'bX;
end 
// expected Q3[ 4 ]
initial
begin
	Q3_expected[4] = 1'bX;
end 
// expected Q3[ 3 ]
initial
begin
	Q3_expected[3] = 1'bX;
end 
// expected Q3[ 2 ]
initial
begin
	Q3_expected[2] = 1'bX;
end 
// expected Q3[ 1 ]
initial
begin
	Q3_expected[1] = 1'bX;
end 
// expected Q3[ 0 ]
initial
begin
	Q3_expected[0] = 1'bX;
end 
// expected Q4[ 7 ]
initial
begin
	Q4_expected[7] = 1'bX;
end 
// expected Q4[ 6 ]
initial
begin
	Q4_expected[6] = 1'bX;
end 
// expected Q4[ 5 ]
initial
begin
	Q4_expected[5] = 1'bX;
end 
// expected Q4[ 4 ]
initial
begin
	Q4_expected[4] = 1'bX;
end 
// expected Q4[ 3 ]
initial
begin
	Q4_expected[3] = 1'bX;
end 
// expected Q4[ 2 ]
initial
begin
	Q4_expected[2] = 1'bX;
end 
// expected Q4[ 1 ]
initial
begin
	Q4_expected[1] = 1'bX;
end 
// expected Q4[ 0 ]
initial
begin
	Q4_expected[0] = 1'bX;
end 
// expected Q5[ 7 ]
initial
begin
	Q5_expected[7] = 1'bX;
end 
// expected Q5[ 6 ]
initial
begin
	Q5_expected[6] = 1'bX;
end 
// expected Q5[ 5 ]
initial
begin
	Q5_expected[5] = 1'bX;
end 
// expected Q5[ 4 ]
initial
begin
	Q5_expected[4] = 1'bX;
end 
// expected Q5[ 3 ]
initial
begin
	Q5_expected[3] = 1'bX;
end 
// expected Q5[ 2 ]
initial
begin
	Q5_expected[2] = 1'bX;
end 
// expected Q5[ 1 ]
initial
begin
	Q5_expected[1] = 1'bX;
end 
// expected Q5[ 0 ]
initial
begin
	Q5_expected[0] = 1'bX;
end 
// expected Q6[ 7 ]
initial
begin
	Q6_expected[7] = 1'bX;
end 
// expected Q6[ 6 ]
initial
begin
	Q6_expected[6] = 1'bX;
end 
// expected Q6[ 5 ]
initial
begin
	Q6_expected[5] = 1'bX;
end 
// expected Q6[ 4 ]
initial
begin
	Q6_expected[4] = 1'bX;
end 
// expected Q6[ 3 ]
initial
begin
	Q6_expected[3] = 1'bX;
end 
// expected Q6[ 2 ]
initial
begin
	Q6_expected[2] = 1'bX;
end 
// expected Q6[ 1 ]
initial
begin
	Q6_expected[1] = 1'bX;
end 
// expected Q6[ 0 ]
initial
begin
	Q6_expected[0] = 1'bX;
end 
// expected Q7[ 7 ]
initial
begin
	Q7_expected[7] = 1'bX;
end 
// expected Q7[ 6 ]
initial
begin
	Q7_expected[6] = 1'bX;
end 
// expected Q7[ 5 ]
initial
begin
	Q7_expected[5] = 1'bX;
end 
// expected Q7[ 4 ]
initial
begin
	Q7_expected[4] = 1'bX;
end 
// expected Q7[ 3 ]
initial
begin
	Q7_expected[3] = 1'bX;
end 
// expected Q7[ 2 ]
initial
begin
	Q7_expected[2] = 1'bX;
end 
// expected Q7[ 1 ]
initial
begin
	Q7_expected[1] = 1'bX;
end 
// expected Q7[ 0 ]
initial
begin
	Q7_expected[0] = 1'bX;
end 

// expected less
initial
begin
	less_expected = 1'bX;
end 
// expected t0[ 7 ]
initial
begin
	t0_expected[7] = 1'bX;
end 
// expected t0[ 6 ]
initial
begin
	t0_expected[6] = 1'bX;
end 
// expected t0[ 5 ]
initial
begin
	t0_expected[5] = 1'bX;
end 
// expected t0[ 4 ]
initial
begin
	t0_expected[4] = 1'bX;
end 
// expected t0[ 3 ]
initial
begin
	t0_expected[3] = 1'bX;
end 
// expected t0[ 2 ]
initial
begin
	t0_expected[2] = 1'bX;
end 
// expected t0[ 1 ]
initial
begin
	t0_expected[1] = 1'bX;
end 
// expected t0[ 0 ]
initial
begin
	t0_expected[0] = 1'bX;
end 
// expected t1[ 7 ]
initial
begin
	t1_expected[7] = 1'bX;
end 
// expected t1[ 6 ]
initial
begin
	t1_expected[6] = 1'bX;
end 
// expected t1[ 5 ]
initial
begin
	t1_expected[5] = 1'bX;
end 
// expected t1[ 4 ]
initial
begin
	t1_expected[4] = 1'bX;
end 
// expected t1[ 3 ]
initial
begin
	t1_expected[3] = 1'bX;
end 
// expected t1[ 2 ]
initial
begin
	t1_expected[2] = 1'bX;
end 
// expected t1[ 1 ]
initial
begin
	t1_expected[1] = 1'bX;
end 
// expected t1[ 0 ]
initial
begin
	t1_expected[0] = 1'bX;
end 
// generate trigger
always @(addr_mem_expected or addr_mem or Addr_plus_expected or Addr_plus or base_expected or base or control_signal_expected or control_signal or less_expected or less or Q0_expected or Q0 or Q1_expected or Q1 or Q2_expected or Q2 or Q3_expected or Q3 or Q4_expected or Q4 or Q5_expected or Q5 or Q6_expected or Q6 or Q7_expected or Q7 or RA1_expected or RA1 or RA2_expected or RA2 or t0_expected or t0 or t1_expected or t1 or WA_expected or WA)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected addr_mem = %b | expected Addr_plus = %b | expected base = %b | expected control_signal = %b | expected less = %b | expected Q0 = %b | expected Q1 = %b | expected Q2 = %b | expected Q3 = %b | expected Q4 = %b | expected Q5 = %b | expected Q6 = %b | expected Q7 = %b | expected RA1 = %b | expected RA2 = %b | expected t0 = %b | expected t1 = %b | expected WA = %b | ",addr_mem_expected_prev,Addr_plus_expected_prev,base_expected_prev,control_signal_expected_prev,less_expected_prev,Q0_expected_prev,Q1_expected_prev,Q2_expected_prev,Q3_expected_prev,Q4_expected_prev,Q5_expected_prev,Q6_expected_prev,Q7_expected_prev,RA1_expected_prev,RA2_expected_prev,t0_expected_prev,t1_expected_prev,WA_expected_prev);
	$display("| real addr_mem = %b | real Addr_plus = %b | real base = %b | real control_signal = %b | real less = %b | real Q0 = %b | real Q1 = %b | real Q2 = %b | real Q3 = %b | real Q4 = %b | real Q5 = %b | real Q6 = %b | real Q7 = %b | real RA1 = %b | real RA2 = %b | real t0 = %b | real t1 = %b | real WA = %b | ",addr_mem_prev,Addr_plus_prev,base_prev,control_signal_prev,less_prev,Q0_prev,Q1_prev,Q2_prev,Q3_prev,Q4_prev,Q5_prev,Q6_prev,Q7_prev,RA1_prev,RA2_prev,t0_prev,t1_prev,WA_prev);
`endif
	if (
		( Addr_plus_expected_prev[0] !== 1'bx ) && ( Addr_plus_prev[0] !== Addr_plus_expected_prev[0] )
		&& ((Addr_plus_expected_prev[0] !== last_Addr_plus_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Addr_plus[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Addr_plus_expected_prev);
		$display ("     Real value = %b", Addr_plus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Addr_plus_exp[0] = Addr_plus_expected_prev[0];
	end
	if (
		( Addr_plus_expected_prev[1] !== 1'bx ) && ( Addr_plus_prev[1] !== Addr_plus_expected_prev[1] )
		&& ((Addr_plus_expected_prev[1] !== last_Addr_plus_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Addr_plus[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Addr_plus_expected_prev);
		$display ("     Real value = %b", Addr_plus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Addr_plus_exp[1] = Addr_plus_expected_prev[1];
	end
	if (
		( Addr_plus_expected_prev[2] !== 1'bx ) && ( Addr_plus_prev[2] !== Addr_plus_expected_prev[2] )
		&& ((Addr_plus_expected_prev[2] !== last_Addr_plus_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Addr_plus[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Addr_plus_expected_prev);
		$display ("     Real value = %b", Addr_plus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Addr_plus_exp[2] = Addr_plus_expected_prev[2];
	end
	if (
		( Addr_plus_expected_prev[3] !== 1'bx ) && ( Addr_plus_prev[3] !== Addr_plus_expected_prev[3] )
		&& ((Addr_plus_expected_prev[3] !== last_Addr_plus_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Addr_plus[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Addr_plus_expected_prev);
		$display ("     Real value = %b", Addr_plus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Addr_plus_exp[3] = Addr_plus_expected_prev[3];
	end
	if (
		( Addr_plus_expected_prev[4] !== 1'bx ) && ( Addr_plus_prev[4] !== Addr_plus_expected_prev[4] )
		&& ((Addr_plus_expected_prev[4] !== last_Addr_plus_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Addr_plus[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Addr_plus_expected_prev);
		$display ("     Real value = %b", Addr_plus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Addr_plus_exp[4] = Addr_plus_expected_prev[4];
	end
	if (
		( Addr_plus_expected_prev[5] !== 1'bx ) && ( Addr_plus_prev[5] !== Addr_plus_expected_prev[5] )
		&& ((Addr_plus_expected_prev[5] !== last_Addr_plus_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Addr_plus[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Addr_plus_expected_prev);
		$display ("     Real value = %b", Addr_plus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Addr_plus_exp[5] = Addr_plus_expected_prev[5];
	end
	if (
		( Addr_plus_expected_prev[6] !== 1'bx ) && ( Addr_plus_prev[6] !== Addr_plus_expected_prev[6] )
		&& ((Addr_plus_expected_prev[6] !== last_Addr_plus_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Addr_plus[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Addr_plus_expected_prev);
		$display ("     Real value = %b", Addr_plus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Addr_plus_exp[6] = Addr_plus_expected_prev[6];
	end
	if (
		( Addr_plus_expected_prev[7] !== 1'bx ) && ( Addr_plus_prev[7] !== Addr_plus_expected_prev[7] )
		&& ((Addr_plus_expected_prev[7] !== last_Addr_plus_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Addr_plus[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Addr_plus_expected_prev);
		$display ("     Real value = %b", Addr_plus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Addr_plus_exp[7] = Addr_plus_expected_prev[7];
	end
	if (
		( control_signal_expected_prev[0] !== 1'bx ) && ( control_signal_prev[0] !== control_signal_expected_prev[0] )
		&& ((control_signal_expected_prev[0] !== last_control_signal_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port control_signal[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", control_signal_expected_prev);
		$display ("     Real value = %b", control_signal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_control_signal_exp[0] = control_signal_expected_prev[0];
	end
	if (
		( control_signal_expected_prev[1] !== 1'bx ) && ( control_signal_prev[1] !== control_signal_expected_prev[1] )
		&& ((control_signal_expected_prev[1] !== last_control_signal_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port control_signal[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", control_signal_expected_prev);
		$display ("     Real value = %b", control_signal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_control_signal_exp[1] = control_signal_expected_prev[1];
	end
	if (
		( control_signal_expected_prev[2] !== 1'bx ) && ( control_signal_prev[2] !== control_signal_expected_prev[2] )
		&& ((control_signal_expected_prev[2] !== last_control_signal_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port control_signal[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", control_signal_expected_prev);
		$display ("     Real value = %b", control_signal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_control_signal_exp[2] = control_signal_expected_prev[2];
	end
	if (
		( control_signal_expected_prev[3] !== 1'bx ) && ( control_signal_prev[3] !== control_signal_expected_prev[3] )
		&& ((control_signal_expected_prev[3] !== last_control_signal_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port control_signal[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", control_signal_expected_prev);
		$display ("     Real value = %b", control_signal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_control_signal_exp[3] = control_signal_expected_prev[3];
	end
	if (
		( control_signal_expected_prev[4] !== 1'bx ) && ( control_signal_prev[4] !== control_signal_expected_prev[4] )
		&& ((control_signal_expected_prev[4] !== last_control_signal_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port control_signal[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", control_signal_expected_prev);
		$display ("     Real value = %b", control_signal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_control_signal_exp[4] = control_signal_expected_prev[4];
	end
	if (
		( control_signal_expected_prev[5] !== 1'bx ) && ( control_signal_prev[5] !== control_signal_expected_prev[5] )
		&& ((control_signal_expected_prev[5] !== last_control_signal_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port control_signal[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", control_signal_expected_prev);
		$display ("     Real value = %b", control_signal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_control_signal_exp[5] = control_signal_expected_prev[5];
	end
	if (
		( control_signal_expected_prev[6] !== 1'bx ) && ( control_signal_prev[6] !== control_signal_expected_prev[6] )
		&& ((control_signal_expected_prev[6] !== last_control_signal_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port control_signal[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", control_signal_expected_prev);
		$display ("     Real value = %b", control_signal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_control_signal_exp[6] = control_signal_expected_prev[6];
	end
	if (
		( control_signal_expected_prev[7] !== 1'bx ) && ( control_signal_prev[7] !== control_signal_expected_prev[7] )
		&& ((control_signal_expected_prev[7] !== last_control_signal_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port control_signal[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", control_signal_expected_prev);
		$display ("     Real value = %b", control_signal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_control_signal_exp[7] = control_signal_expected_prev[7];
	end
	if (
		( less_expected_prev !== 1'bx ) && ( less_prev !== less_expected_prev )
		&& ((less_expected_prev !== last_less_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port less :: @time = %t",  $realtime);
		$display ("     Expected value = %b", less_expected_prev);
		$display ("     Real value = %b", less_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_less_exp = less_expected_prev;
	end
	if (
		( Q0_expected_prev[0] !== 1'bx ) && ( Q0_prev[0] !== Q0_expected_prev[0] )
		&& ((Q0_expected_prev[0] !== last_Q0_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q0_expected_prev);
		$display ("     Real value = %b", Q0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Q0_exp[0] = Q0_expected_prev[0];
	end
	if (
		( Q0_expected_prev[1] !== 1'bx ) && ( Q0_prev[1] !== Q0_expected_prev[1] )
		&& ((Q0_expected_prev[1] !== last_Q0_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q0_expected_prev);
		$display ("     Real value = %b", Q0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Q0_exp[1] = Q0_expected_prev[1];
	end
	if (
		( Q0_expected_prev[2] !== 1'bx ) && ( Q0_prev[2] !== Q0_expected_prev[2] )
		&& ((Q0_expected_prev[2] !== last_Q0_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q0_expected_prev);
		$display ("     Real value = %b", Q0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Q0_exp[2] = Q0_expected_prev[2];
	end
	if (
		( Q0_expected_prev[3] !== 1'bx ) && ( Q0_prev[3] !== Q0_expected_prev[3] )
		&& ((Q0_expected_prev[3] !== last_Q0_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q0_expected_prev);
		$display ("     Real value = %b", Q0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Q0_exp[3] = Q0_expected_prev[3];
	end
	if (
		( Q0_expected_prev[4] !== 1'bx ) && ( Q0_prev[4] !== Q0_expected_prev[4] )
		&& ((Q0_expected_prev[4] !== last_Q0_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q0_expected_prev);
		$display ("     Real value = %b", Q0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Q0_exp[4] = Q0_expected_prev[4];
	end
	if (
		( Q0_expected_prev[5] !== 1'bx ) && ( Q0_prev[5] !== Q0_expected_prev[5] )
		&& ((Q0_expected_prev[5] !== last_Q0_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q0_expected_prev);
		$display ("     Real value = %b", Q0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Q0_exp[5] = Q0_expected_prev[5];
	end
	if (
		( Q0_expected_prev[6] !== 1'bx ) && ( Q0_prev[6] !== Q0_expected_prev[6] )
		&& ((Q0_expected_prev[6] !== last_Q0_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q0_expected_prev);
		$display ("     Real value = %b", Q0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Q0_exp[6] = Q0_expected_prev[6];
	end
	if (
		( Q0_expected_prev[7] !== 1'bx ) && ( Q0_prev[7] !== Q0_expected_prev[7] )
		&& ((Q0_expected_prev[7] !== last_Q0_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q0_expected_prev);
		$display ("     Real value = %b", Q0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Q0_exp[7] = Q0_expected_prev[7];
	end
	if (
		( Q1_expected_prev[0] !== 1'bx ) && ( Q1_prev[0] !== Q1_expected_prev[0] )
		&& ((Q1_expected_prev[0] !== last_Q1_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_expected_prev);
		$display ("     Real value = %b", Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Q1_exp[0] = Q1_expected_prev[0];
	end
	if (
		( Q1_expected_prev[1] !== 1'bx ) && ( Q1_prev[1] !== Q1_expected_prev[1] )
		&& ((Q1_expected_prev[1] !== last_Q1_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_expected_prev);
		$display ("     Real value = %b", Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Q1_exp[1] = Q1_expected_prev[1];
	end
	if (
		( Q1_expected_prev[2] !== 1'bx ) && ( Q1_prev[2] !== Q1_expected_prev[2] )
		&& ((Q1_expected_prev[2] !== last_Q1_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_expected_prev);
		$display ("     Real value = %b", Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Q1_exp[2] = Q1_expected_prev[2];
	end
	if (
		( Q1_expected_prev[3] !== 1'bx ) && ( Q1_prev[3] !== Q1_expected_prev[3] )
		&& ((Q1_expected_prev[3] !== last_Q1_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_expected_prev);
		$display ("     Real value = %b", Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Q1_exp[3] = Q1_expected_prev[3];
	end
	if (
		( Q1_expected_prev[4] !== 1'bx ) && ( Q1_prev[4] !== Q1_expected_prev[4] )
		&& ((Q1_expected_prev[4] !== last_Q1_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_expected_prev);
		$display ("     Real value = %b", Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Q1_exp[4] = Q1_expected_prev[4];
	end
	if (
		( Q1_expected_prev[5] !== 1'bx ) && ( Q1_prev[5] !== Q1_expected_prev[5] )
		&& ((Q1_expected_prev[5] !== last_Q1_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_expected_prev);
		$display ("     Real value = %b", Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Q1_exp[5] = Q1_expected_prev[5];
	end
	if (
		( Q1_expected_prev[6] !== 1'bx ) && ( Q1_prev[6] !== Q1_expected_prev[6] )
		&& ((Q1_expected_prev[6] !== last_Q1_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_expected_prev);
		$display ("     Real value = %b", Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Q1_exp[6] = Q1_expected_prev[6];
	end
	if (
		( Q1_expected_prev[7] !== 1'bx ) && ( Q1_prev[7] !== Q1_expected_prev[7] )
		&& ((Q1_expected_prev[7] !== last_Q1_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_expected_prev);
		$display ("     Real value = %b", Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Q1_exp[7] = Q1_expected_prev[7];
	end
	if (
		( Q2_expected_prev[0] !== 1'bx ) && ( Q2_prev[0] !== Q2_expected_prev[0] )
		&& ((Q2_expected_prev[0] !== last_Q2_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2_expected_prev);
		$display ("     Real value = %b", Q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Q2_exp[0] = Q2_expected_prev[0];
	end
	if (
		( Q2_expected_prev[1] !== 1'bx ) && ( Q2_prev[1] !== Q2_expected_prev[1] )
		&& ((Q2_expected_prev[1] !== last_Q2_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2_expected_prev);
		$display ("     Real value = %b", Q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Q2_exp[1] = Q2_expected_prev[1];
	end
	if (
		( Q2_expected_prev[2] !== 1'bx ) && ( Q2_prev[2] !== Q2_expected_prev[2] )
		&& ((Q2_expected_prev[2] !== last_Q2_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2_expected_prev);
		$display ("     Real value = %b", Q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Q2_exp[2] = Q2_expected_prev[2];
	end
	if (
		( Q2_expected_prev[3] !== 1'bx ) && ( Q2_prev[3] !== Q2_expected_prev[3] )
		&& ((Q2_expected_prev[3] !== last_Q2_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2_expected_prev);
		$display ("     Real value = %b", Q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Q2_exp[3] = Q2_expected_prev[3];
	end
	if (
		( Q2_expected_prev[4] !== 1'bx ) && ( Q2_prev[4] !== Q2_expected_prev[4] )
		&& ((Q2_expected_prev[4] !== last_Q2_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2_expected_prev);
		$display ("     Real value = %b", Q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Q2_exp[4] = Q2_expected_prev[4];
	end
	if (
		( Q2_expected_prev[5] !== 1'bx ) && ( Q2_prev[5] !== Q2_expected_prev[5] )
		&& ((Q2_expected_prev[5] !== last_Q2_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2_expected_prev);
		$display ("     Real value = %b", Q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Q2_exp[5] = Q2_expected_prev[5];
	end
	if (
		( Q2_expected_prev[6] !== 1'bx ) && ( Q2_prev[6] !== Q2_expected_prev[6] )
		&& ((Q2_expected_prev[6] !== last_Q2_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2_expected_prev);
		$display ("     Real value = %b", Q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Q2_exp[6] = Q2_expected_prev[6];
	end
	if (
		( Q2_expected_prev[7] !== 1'bx ) && ( Q2_prev[7] !== Q2_expected_prev[7] )
		&& ((Q2_expected_prev[7] !== last_Q2_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2_expected_prev);
		$display ("     Real value = %b", Q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Q2_exp[7] = Q2_expected_prev[7];
	end
	if (
		( Q3_expected_prev[0] !== 1'bx ) && ( Q3_prev[0] !== Q3_expected_prev[0] )
		&& ((Q3_expected_prev[0] !== last_Q3_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q3_expected_prev);
		$display ("     Real value = %b", Q3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Q3_exp[0] = Q3_expected_prev[0];
	end
	if (
		( Q3_expected_prev[1] !== 1'bx ) && ( Q3_prev[1] !== Q3_expected_prev[1] )
		&& ((Q3_expected_prev[1] !== last_Q3_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q3_expected_prev);
		$display ("     Real value = %b", Q3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Q3_exp[1] = Q3_expected_prev[1];
	end
	if (
		( Q3_expected_prev[2] !== 1'bx ) && ( Q3_prev[2] !== Q3_expected_prev[2] )
		&& ((Q3_expected_prev[2] !== last_Q3_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q3_expected_prev);
		$display ("     Real value = %b", Q3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Q3_exp[2] = Q3_expected_prev[2];
	end
	if (
		( Q3_expected_prev[3] !== 1'bx ) && ( Q3_prev[3] !== Q3_expected_prev[3] )
		&& ((Q3_expected_prev[3] !== last_Q3_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q3_expected_prev);
		$display ("     Real value = %b", Q3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Q3_exp[3] = Q3_expected_prev[3];
	end
	if (
		( Q3_expected_prev[4] !== 1'bx ) && ( Q3_prev[4] !== Q3_expected_prev[4] )
		&& ((Q3_expected_prev[4] !== last_Q3_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q3_expected_prev);
		$display ("     Real value = %b", Q3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Q3_exp[4] = Q3_expected_prev[4];
	end
	if (
		( Q3_expected_prev[5] !== 1'bx ) && ( Q3_prev[5] !== Q3_expected_prev[5] )
		&& ((Q3_expected_prev[5] !== last_Q3_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q3_expected_prev);
		$display ("     Real value = %b", Q3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Q3_exp[5] = Q3_expected_prev[5];
	end
	if (
		( Q3_expected_prev[6] !== 1'bx ) && ( Q3_prev[6] !== Q3_expected_prev[6] )
		&& ((Q3_expected_prev[6] !== last_Q3_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q3_expected_prev);
		$display ("     Real value = %b", Q3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Q3_exp[6] = Q3_expected_prev[6];
	end
	if (
		( Q3_expected_prev[7] !== 1'bx ) && ( Q3_prev[7] !== Q3_expected_prev[7] )
		&& ((Q3_expected_prev[7] !== last_Q3_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q3_expected_prev);
		$display ("     Real value = %b", Q3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Q3_exp[7] = Q3_expected_prev[7];
	end
	if (
		( Q4_expected_prev[0] !== 1'bx ) && ( Q4_prev[0] !== Q4_expected_prev[0] )
		&& ((Q4_expected_prev[0] !== last_Q4_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q4_expected_prev);
		$display ("     Real value = %b", Q4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Q4_exp[0] = Q4_expected_prev[0];
	end
	if (
		( Q4_expected_prev[1] !== 1'bx ) && ( Q4_prev[1] !== Q4_expected_prev[1] )
		&& ((Q4_expected_prev[1] !== last_Q4_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q4_expected_prev);
		$display ("     Real value = %b", Q4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Q4_exp[1] = Q4_expected_prev[1];
	end
	if (
		( Q4_expected_prev[2] !== 1'bx ) && ( Q4_prev[2] !== Q4_expected_prev[2] )
		&& ((Q4_expected_prev[2] !== last_Q4_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q4_expected_prev);
		$display ("     Real value = %b", Q4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Q4_exp[2] = Q4_expected_prev[2];
	end
	if (
		( Q4_expected_prev[3] !== 1'bx ) && ( Q4_prev[3] !== Q4_expected_prev[3] )
		&& ((Q4_expected_prev[3] !== last_Q4_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q4_expected_prev);
		$display ("     Real value = %b", Q4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Q4_exp[3] = Q4_expected_prev[3];
	end
	if (
		( Q4_expected_prev[4] !== 1'bx ) && ( Q4_prev[4] !== Q4_expected_prev[4] )
		&& ((Q4_expected_prev[4] !== last_Q4_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q4_expected_prev);
		$display ("     Real value = %b", Q4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Q4_exp[4] = Q4_expected_prev[4];
	end
	if (
		( Q4_expected_prev[5] !== 1'bx ) && ( Q4_prev[5] !== Q4_expected_prev[5] )
		&& ((Q4_expected_prev[5] !== last_Q4_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q4_expected_prev);
		$display ("     Real value = %b", Q4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Q4_exp[5] = Q4_expected_prev[5];
	end
	if (
		( Q4_expected_prev[6] !== 1'bx ) && ( Q4_prev[6] !== Q4_expected_prev[6] )
		&& ((Q4_expected_prev[6] !== last_Q4_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q4_expected_prev);
		$display ("     Real value = %b", Q4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Q4_exp[6] = Q4_expected_prev[6];
	end
	if (
		( Q4_expected_prev[7] !== 1'bx ) && ( Q4_prev[7] !== Q4_expected_prev[7] )
		&& ((Q4_expected_prev[7] !== last_Q4_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q4[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q4_expected_prev);
		$display ("     Real value = %b", Q4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Q4_exp[7] = Q4_expected_prev[7];
	end
	if (
		( Q5_expected_prev[0] !== 1'bx ) && ( Q5_prev[0] !== Q5_expected_prev[0] )
		&& ((Q5_expected_prev[0] !== last_Q5_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q5_expected_prev);
		$display ("     Real value = %b", Q5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Q5_exp[0] = Q5_expected_prev[0];
	end
	if (
		( Q5_expected_prev[1] !== 1'bx ) && ( Q5_prev[1] !== Q5_expected_prev[1] )
		&& ((Q5_expected_prev[1] !== last_Q5_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q5_expected_prev);
		$display ("     Real value = %b", Q5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Q5_exp[1] = Q5_expected_prev[1];
	end
	if (
		( Q5_expected_prev[2] !== 1'bx ) && ( Q5_prev[2] !== Q5_expected_prev[2] )
		&& ((Q5_expected_prev[2] !== last_Q5_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q5_expected_prev);
		$display ("     Real value = %b", Q5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Q5_exp[2] = Q5_expected_prev[2];
	end
	if (
		( Q5_expected_prev[3] !== 1'bx ) && ( Q5_prev[3] !== Q5_expected_prev[3] )
		&& ((Q5_expected_prev[3] !== last_Q5_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q5_expected_prev);
		$display ("     Real value = %b", Q5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Q5_exp[3] = Q5_expected_prev[3];
	end
	if (
		( Q5_expected_prev[4] !== 1'bx ) && ( Q5_prev[4] !== Q5_expected_prev[4] )
		&& ((Q5_expected_prev[4] !== last_Q5_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q5[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q5_expected_prev);
		$display ("     Real value = %b", Q5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Q5_exp[4] = Q5_expected_prev[4];
	end
	if (
		( Q5_expected_prev[5] !== 1'bx ) && ( Q5_prev[5] !== Q5_expected_prev[5] )
		&& ((Q5_expected_prev[5] !== last_Q5_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q5[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q5_expected_prev);
		$display ("     Real value = %b", Q5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Q5_exp[5] = Q5_expected_prev[5];
	end
	if (
		( Q5_expected_prev[6] !== 1'bx ) && ( Q5_prev[6] !== Q5_expected_prev[6] )
		&& ((Q5_expected_prev[6] !== last_Q5_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q5[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q5_expected_prev);
		$display ("     Real value = %b", Q5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Q5_exp[6] = Q5_expected_prev[6];
	end
	if (
		( Q5_expected_prev[7] !== 1'bx ) && ( Q5_prev[7] !== Q5_expected_prev[7] )
		&& ((Q5_expected_prev[7] !== last_Q5_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q5[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q5_expected_prev);
		$display ("     Real value = %b", Q5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Q5_exp[7] = Q5_expected_prev[7];
	end
	if (
		( Q6_expected_prev[0] !== 1'bx ) && ( Q6_prev[0] !== Q6_expected_prev[0] )
		&& ((Q6_expected_prev[0] !== last_Q6_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q6[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q6_expected_prev);
		$display ("     Real value = %b", Q6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_Q6_exp[0] = Q6_expected_prev[0];
	end
	if (
		( Q6_expected_prev[1] !== 1'bx ) && ( Q6_prev[1] !== Q6_expected_prev[1] )
		&& ((Q6_expected_prev[1] !== last_Q6_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q6[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q6_expected_prev);
		$display ("     Real value = %b", Q6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_Q6_exp[1] = Q6_expected_prev[1];
	end
	if (
		( Q6_expected_prev[2] !== 1'bx ) && ( Q6_prev[2] !== Q6_expected_prev[2] )
		&& ((Q6_expected_prev[2] !== last_Q6_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q6[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q6_expected_prev);
		$display ("     Real value = %b", Q6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_Q6_exp[2] = Q6_expected_prev[2];
	end
	if (
		( Q6_expected_prev[3] !== 1'bx ) && ( Q6_prev[3] !== Q6_expected_prev[3] )
		&& ((Q6_expected_prev[3] !== last_Q6_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q6[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q6_expected_prev);
		$display ("     Real value = %b", Q6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_Q6_exp[3] = Q6_expected_prev[3];
	end
	if (
		( Q6_expected_prev[4] !== 1'bx ) && ( Q6_prev[4] !== Q6_expected_prev[4] )
		&& ((Q6_expected_prev[4] !== last_Q6_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q6[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q6_expected_prev);
		$display ("     Real value = %b", Q6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_Q6_exp[4] = Q6_expected_prev[4];
	end
	if (
		( Q6_expected_prev[5] !== 1'bx ) && ( Q6_prev[5] !== Q6_expected_prev[5] )
		&& ((Q6_expected_prev[5] !== last_Q6_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q6[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q6_expected_prev);
		$display ("     Real value = %b", Q6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_Q6_exp[5] = Q6_expected_prev[5];
	end
	if (
		( Q6_expected_prev[6] !== 1'bx ) && ( Q6_prev[6] !== Q6_expected_prev[6] )
		&& ((Q6_expected_prev[6] !== last_Q6_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q6[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q6_expected_prev);
		$display ("     Real value = %b", Q6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_Q6_exp[6] = Q6_expected_prev[6];
	end
	if (
		( Q6_expected_prev[7] !== 1'bx ) && ( Q6_prev[7] !== Q6_expected_prev[7] )
		&& ((Q6_expected_prev[7] !== last_Q6_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q6[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q6_expected_prev);
		$display ("     Real value = %b", Q6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_Q6_exp[7] = Q6_expected_prev[7];
	end
	if (
		( Q7_expected_prev[0] !== 1'bx ) && ( Q7_prev[0] !== Q7_expected_prev[0] )
		&& ((Q7_expected_prev[0] !== last_Q7_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q7[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q7_expected_prev);
		$display ("     Real value = %b", Q7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Q7_exp[0] = Q7_expected_prev[0];
	end
	if (
		( Q7_expected_prev[1] !== 1'bx ) && ( Q7_prev[1] !== Q7_expected_prev[1] )
		&& ((Q7_expected_prev[1] !== last_Q7_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q7[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q7_expected_prev);
		$display ("     Real value = %b", Q7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Q7_exp[1] = Q7_expected_prev[1];
	end
	if (
		( Q7_expected_prev[2] !== 1'bx ) && ( Q7_prev[2] !== Q7_expected_prev[2] )
		&& ((Q7_expected_prev[2] !== last_Q7_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q7[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q7_expected_prev);
		$display ("     Real value = %b", Q7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Q7_exp[2] = Q7_expected_prev[2];
	end
	if (
		( Q7_expected_prev[3] !== 1'bx ) && ( Q7_prev[3] !== Q7_expected_prev[3] )
		&& ((Q7_expected_prev[3] !== last_Q7_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q7[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q7_expected_prev);
		$display ("     Real value = %b", Q7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Q7_exp[3] = Q7_expected_prev[3];
	end
	if (
		( Q7_expected_prev[4] !== 1'bx ) && ( Q7_prev[4] !== Q7_expected_prev[4] )
		&& ((Q7_expected_prev[4] !== last_Q7_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q7[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q7_expected_prev);
		$display ("     Real value = %b", Q7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Q7_exp[4] = Q7_expected_prev[4];
	end
	if (
		( Q7_expected_prev[5] !== 1'bx ) && ( Q7_prev[5] !== Q7_expected_prev[5] )
		&& ((Q7_expected_prev[5] !== last_Q7_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q7[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q7_expected_prev);
		$display ("     Real value = %b", Q7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Q7_exp[5] = Q7_expected_prev[5];
	end
	if (
		( Q7_expected_prev[6] !== 1'bx ) && ( Q7_prev[6] !== Q7_expected_prev[6] )
		&& ((Q7_expected_prev[6] !== last_Q7_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q7[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q7_expected_prev);
		$display ("     Real value = %b", Q7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Q7_exp[6] = Q7_expected_prev[6];
	end
	if (
		( Q7_expected_prev[7] !== 1'bx ) && ( Q7_prev[7] !== Q7_expected_prev[7] )
		&& ((Q7_expected_prev[7] !== last_Q7_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q7[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q7_expected_prev);
		$display ("     Real value = %b", Q7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Q7_exp[7] = Q7_expected_prev[7];
	end
	if (
		( RA1_expected_prev[0] !== 1'bx ) && ( RA1_prev[0] !== RA1_expected_prev[0] )
		&& ((RA1_expected_prev[0] !== last_RA1_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RA1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RA1_expected_prev);
		$display ("     Real value = %b", RA1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_RA1_exp[0] = RA1_expected_prev[0];
	end
	if (
		( RA1_expected_prev[1] !== 1'bx ) && ( RA1_prev[1] !== RA1_expected_prev[1] )
		&& ((RA1_expected_prev[1] !== last_RA1_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RA1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RA1_expected_prev);
		$display ("     Real value = %b", RA1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_RA1_exp[1] = RA1_expected_prev[1];
	end
	if (
		( RA2_expected_prev[0] !== 1'bx ) && ( RA2_prev[0] !== RA2_expected_prev[0] )
		&& ((RA2_expected_prev[0] !== last_RA2_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RA2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RA2_expected_prev);
		$display ("     Real value = %b", RA2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RA2_exp[0] = RA2_expected_prev[0];
	end
	if (
		( RA2_expected_prev[1] !== 1'bx ) && ( RA2_prev[1] !== RA2_expected_prev[1] )
		&& ((RA2_expected_prev[1] !== last_RA2_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RA2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RA2_expected_prev);
		$display ("     Real value = %b", RA2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RA2_exp[1] = RA2_expected_prev[1];
	end
	if (
		( t0_expected_prev[0] !== 1'bx ) && ( t0_prev[0] !== t0_expected_prev[0] )
		&& ((t0_expected_prev[0] !== last_t0_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t0_exp[0] = t0_expected_prev[0];
	end
	if (
		( t0_expected_prev[1] !== 1'bx ) && ( t0_prev[1] !== t0_expected_prev[1] )
		&& ((t0_expected_prev[1] !== last_t0_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t0_exp[1] = t0_expected_prev[1];
	end
	if (
		( t0_expected_prev[2] !== 1'bx ) && ( t0_prev[2] !== t0_expected_prev[2] )
		&& ((t0_expected_prev[2] !== last_t0_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t0_exp[2] = t0_expected_prev[2];
	end
	if (
		( t0_expected_prev[3] !== 1'bx ) && ( t0_prev[3] !== t0_expected_prev[3] )
		&& ((t0_expected_prev[3] !== last_t0_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t0_exp[3] = t0_expected_prev[3];
	end
	if (
		( t0_expected_prev[4] !== 1'bx ) && ( t0_prev[4] !== t0_expected_prev[4] )
		&& ((t0_expected_prev[4] !== last_t0_exp[4]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t0_exp[4] = t0_expected_prev[4];
	end
	if (
		( t0_expected_prev[5] !== 1'bx ) && ( t0_prev[5] !== t0_expected_prev[5] )
		&& ((t0_expected_prev[5] !== last_t0_exp[5]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t0_exp[5] = t0_expected_prev[5];
	end
	if (
		( t0_expected_prev[6] !== 1'bx ) && ( t0_prev[6] !== t0_expected_prev[6] )
		&& ((t0_expected_prev[6] !== last_t0_exp[6]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t0_exp[6] = t0_expected_prev[6];
	end
	if (
		( t0_expected_prev[7] !== 1'bx ) && ( t0_prev[7] !== t0_expected_prev[7] )
		&& ((t0_expected_prev[7] !== last_t0_exp[7]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t0_exp[7] = t0_expected_prev[7];
	end
	if (
		( t1_expected_prev[0] !== 1'bx ) && ( t1_prev[0] !== t1_expected_prev[0] )
		&& ((t1_expected_prev[0] !== last_t1_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_t1_exp[0] = t1_expected_prev[0];
	end
	if (
		( t1_expected_prev[1] !== 1'bx ) && ( t1_prev[1] !== t1_expected_prev[1] )
		&& ((t1_expected_prev[1] !== last_t1_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_t1_exp[1] = t1_expected_prev[1];
	end
	if (
		( t1_expected_prev[2] !== 1'bx ) && ( t1_prev[2] !== t1_expected_prev[2] )
		&& ((t1_expected_prev[2] !== last_t1_exp[2]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_t1_exp[2] = t1_expected_prev[2];
	end
	if (
		( t1_expected_prev[3] !== 1'bx ) && ( t1_prev[3] !== t1_expected_prev[3] )
		&& ((t1_expected_prev[3] !== last_t1_exp[3]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_t1_exp[3] = t1_expected_prev[3];
	end
	if (
		( t1_expected_prev[4] !== 1'bx ) && ( t1_prev[4] !== t1_expected_prev[4] )
		&& ((t1_expected_prev[4] !== last_t1_exp[4]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_t1_exp[4] = t1_expected_prev[4];
	end
	if (
		( t1_expected_prev[5] !== 1'bx ) && ( t1_prev[5] !== t1_expected_prev[5] )
		&& ((t1_expected_prev[5] !== last_t1_exp[5]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_t1_exp[5] = t1_expected_prev[5];
	end
	if (
		( t1_expected_prev[6] !== 1'bx ) && ( t1_prev[6] !== t1_expected_prev[6] )
		&& ((t1_expected_prev[6] !== last_t1_exp[6]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_t1_exp[6] = t1_expected_prev[6];
	end
	if (
		( t1_expected_prev[7] !== 1'bx ) && ( t1_prev[7] !== t1_expected_prev[7] )
		&& ((t1_expected_prev[7] !== last_t1_exp[7]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_t1_exp[7] = t1_expected_prev[7];
	end
	if (
		( WA_expected_prev[0] !== 1'bx ) && ( WA_prev[0] !== WA_expected_prev[0] )
		&& ((WA_expected_prev[0] !== last_WA_exp[0]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WA_expected_prev);
		$display ("     Real value = %b", WA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_WA_exp[0] = WA_expected_prev[0];
	end
	if (
		( WA_expected_prev[1] !== 1'bx ) && ( WA_prev[1] !== WA_expected_prev[1] )
		&& ((WA_expected_prev[1] !== last_WA_exp[1]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WA_expected_prev);
		$display ("     Real value = %b", WA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_WA_exp[1] = WA_expected_prev[1];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Top_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] Data_in;
// wires                                               
wire [7:0] addr_mem;
wire [7:0] Addr_plus;
wire [7:0] base;
wire [7:0] control_signal;
wire less;
wire [7:0] Q0;
wire [7:0] Q1;
wire [7:0] Q2;
wire [7:0] Q3;
wire [7:0] Q4;
wire [7:0] Q5;
wire [7:0] Q6;
wire [7:0] Q7;
wire [1:0] RA1;
wire [1:0] RA2;
wire [7:0] t0;
wire [7:0] t1;
wire [1:0] WA;

wire sampler;                             

// assign statements (if any)                          
Top i1 (
// port map - connection between master ports and signals/registers   
	.addr_mem(addr_mem),
	.Addr_plus(Addr_plus),
	.base(base),
	.clk(clk),
	.control_signal(control_signal),
	.Data_in(Data_in),
	.less(less),
	.Q0(Q0),
	.Q1(Q1),
	.Q2(Q2),
	.Q3(Q3),
	.Q4(Q4),
	.Q5(Q5),
	.Q6(Q6),
	.Q7(Q7),
	.RA1(RA1),
	.RA2(RA2),
	.t0(t0),
	.t1(t1),
	.WA(WA)
);

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 
// control_signal[ 7 ]
initial
begin
	control_signal[7] = 1'b0;
	control_signal[7] = #340000 1'b1;
	control_signal[7] = #40000 1'b0;
	control_signal[7] = #200000 1'b1;
	control_signal[7] = #40000 1'b0;
end 
// control_signal[ 6 ]
initial
begin
	control_signal[6] = 1'b0;
	control_signal[6] = #20000 1'b1;
	control_signal[6] = #320000 1'b0;
end 
// control_signal[ 5 ]
initial
begin
	control_signal[5] = 1'b0;
	control_signal[5] = #460000 1'b1;
	control_signal[5] = #40000 1'b0;
	control_signal[5] = #200000 1'b1;
	control_signal[5] = #40000 1'b0;
end 
// control_signal[ 4 ]
initial
begin
	control_signal[4] = 1'b0;
	control_signal[4] = #20000 1'b1;
	control_signal[4] = #320000 1'b0;
	control_signal[4] = #160000 1'b1;
	control_signal[4] = #80000 1'b0;
	control_signal[4] = #160000 1'b1;
	control_signal[4] = #80000 1'b0;
end 
// control_signal[ 3 ]
initial
begin
	control_signal[3] = 1'b0;
	control_signal[3] = #380000 1'b1;
	control_signal[3] = #80000 1'b0;
	control_signal[3] = #160000 1'b1;
	control_signal[3] = #80000 1'b0;
end 
// control_signal[ 2 ]
initial
begin
	control_signal[2] = 1'b0;
	control_signal[2] = #460000 1'b1;
	control_signal[2] = #40000 1'b0;
	control_signal[2] = #200000 1'b1;
	control_signal[2] = #40000 1'b0;
end 
// control_signal[ 1 ]
initial
begin
	control_signal[1] = 1'b0;
	control_signal[1] = #20000 1'b1;
	control_signal[1] = #320000 1'b0;
	control_signal[1] = #40000 1'b1;
	control_signal[1] = #80000 1'b0;
	control_signal[1] = #40000 1'b1;
	control_signal[1] = #80000 1'b0;
	control_signal[1] = #40000 1'b1;
	control_signal[1] = #80000 1'b0;
	control_signal[1] = #40000 1'b1;
	control_signal[1] = #80000 1'b0;
end 
// control_signal[ 0 ]
initial
begin
	control_signal[0] = 1'b0;
	control_signal[0] = #340000 1'b1;
	control_signal[0] = #160000 1'b0;
	control_signal[0] = #80000 1'b1;
	control_signal[0] = #160000 1'b0;
end 
// Addr_plus[ 7 ]
initial
begin
	Addr_plus[7] = 1'b0;
end 
// Addr_plus[ 6 ]
initial
begin
	Addr_plus[6] = 1'b0;
end 
// Addr_plus[ 5 ]
initial
begin
	Addr_plus[5] = 1'b0;
end 
// Addr_plus[ 4 ]
initial
begin
	Addr_plus[4] = 1'b0;
end 
// Addr_plus[ 3 ]
initial
begin
	Addr_plus[3] = 1'b0;
end 
// Addr_plus[ 2 ]
initial
begin
	Addr_plus[2] = 1'b0;
	Addr_plus[2] = #180000 1'b1;
	Addr_plus[2] = #160000 1'b0;
end 
// Addr_plus[ 1 ]
initial
begin
	Addr_plus[1] = 1'b0;
	Addr_plus[1] = #100000 1'b1;
	Addr_plus[1] = #80000 1'b0;
	Addr_plus[1] = #80000 1'b1;
	Addr_plus[1] = #80000 1'b0;
end 
// Addr_plus[ 0 ]
initial
begin
	Addr_plus[0] = 1'b0;
	Addr_plus[0] = #60000 1'b1;
	# 40000;
	repeat(3)
	begin
		Addr_plus[0] = 1'b0;
		Addr_plus[0] = #40000 1'b1;
		# 40000;
	end
	Addr_plus[0] = 1'b0;
	Addr_plus[0] = #80000 1'b1;
	Addr_plus[0] = #40000 1'b0;
	Addr_plus[0] = #80000 1'b1;
	Addr_plus[0] = #40000 1'b0;
	Addr_plus[0] = #80000 1'b1;
	Addr_plus[0] = #40000 1'b0;
	Addr_plus[0] = #80000 1'b1;
	Addr_plus[0] = #40000 1'b0;
end 
// Data_in[ 7 ]
initial
begin
	Data_in[7] = 1'b0;
	Data_in[7] = #140000 1'b1;
	Data_in[7] = #80000 1'b0;
	Data_in[7] = #40000 1'b1;
	Data_in[7] = #80000 1'b0;
end 
// Data_in[ 6 ]
initial
begin
	Data_in[6] = 1'b0;
	Data_in[6] = #20000 1'b1;
	Data_in[6] = #40000 1'b0;
	Data_in[6] = #120000 1'b1;
	Data_in[6] = #40000 1'b0;
	Data_in[6] = #80000 1'b1;
	Data_in[6] = #40000 1'b0;
end 
// Data_in[ 5 ]
initial
begin
	Data_in[5] = 1'b0;
	Data_in[5] = #220000 1'b1;
	Data_in[5] = #40000 1'b0;
	Data_in[5] = #40000 1'b1;
	Data_in[5] = #40000 1'b0;
end 
// Data_in[ 4 ]
initial
begin
	Data_in[4] = 1'b0;
	Data_in[4] = #60000 1'b1;
	Data_in[4] = #40000 1'b0;
	Data_in[4] = #40000 1'b1;
	Data_in[4] = #160000 1'b0;
end 
// Data_in[ 3 ]
initial
begin
	Data_in[3] = 1'b0;
	Data_in[3] = #20000 1'b1;
	Data_in[3] = #40000 1'b0;
	Data_in[3] = #40000 1'b1;
	Data_in[3] = #40000 1'b0;
	Data_in[3] = #40000 1'b1;
	Data_in[3] = #40000 1'b0;
end 
// Data_in[ 2 ]
initial
begin
	Data_in[2] = 1'b0;
	Data_in[2] = #20000 1'b1;
	Data_in[2] = #80000 1'b0;
	Data_in[2] = #80000 1'b1;
	Data_in[2] = #40000 1'b0;
	Data_in[2] = #40000 1'b1;
	Data_in[2] = #80000 1'b0;
end 
// Data_in[ 1 ]
initial
begin
	Data_in[1] = 1'b0;
	Data_in[1] = #100000 1'b1;
	Data_in[1] = #80000 1'b0;
	Data_in[1] = #80000 1'b1;
	Data_in[1] = #80000 1'b0;
end 
// Data_in[ 0 ]
initial
begin
	Data_in[0] = 1'b0;
	Data_in[0] = #20000 1'b1;
	Data_in[0] = #40000 1'b0;
end 
// RA1[ 1 ]
initial
begin
	RA1[1] = 1'b0;
	RA1[1] = #460000 1'b1;
	RA1[1] = #40000 1'b0;
	RA1[1] = #200000 1'b1;
	RA1[1] = #40000 1'b0;
end 
// RA1[ 0 ]
initial
begin
	RA1[0] = 1'b0;
end 
// RA2[ 1 ]
initial
begin
	RA2[1] = 1'b0;
	RA2[1] = #460000 1'b1;
	RA2[1] = #40000 1'b0;
	RA2[1] = #200000 1'b1;
	RA2[1] = #40000 1'b0;
end 
// RA2[ 0 ]
initial
begin
	RA2[0] = 1'b0;
	RA2[0] = #460000 1'b1;
	RA2[0] = #40000 1'b0;
	RA2[0] = #200000 1'b1;
	RA2[0] = #40000 1'b0;
end 
// WA[ 1 ]
initial
begin
	WA[1] = 1'b0;
	WA[1] = #380000 1'b1;
	WA[1] = #80000 1'b0;
	WA[1] = #160000 1'b1;
	WA[1] = #80000 1'b0;
end 
// WA[ 0 ]
initial
begin
	WA[0] = 1'b0;
	WA[0] = #420000 1'b1;
	WA[0] = #80000 1'b0;
	WA[0] = #160000 1'b1;
	WA[0] = #80000 1'b0;
end 

Top_vlg_sample_tst tb_sample (
	.clk(clk),
	.Data_in(Data_in),
	.sampler_tx(sampler)
);

Top_vlg_check_tst tb_out(
	.addr_mem(addr_mem),
	.Addr_plus(Addr_plus),
	.base(base),
	.control_signal(control_signal),
	.less(less),
	.Q0(Q0),
	.Q1(Q1),
	.Q2(Q2),
	.Q3(Q3),
	.Q4(Q4),
	.Q5(Q5),
	.Q6(Q6),
	.Q7(Q7),
	.RA1(RA1),
	.RA2(RA2),
	.t0(t0),
	.t1(t1),
	.WA(WA),
	.sampler_rx(sampler)
);
endmodule

