// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/10/2024 01:55:43"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    RegisterFile
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RegisterFile_vlg_sample_tst(
	clk,
	RA1,
	RA2,
	WA,
	WD,
	WEN,
	sampler_tx
);
input  clk;
input [1:0] RA1;
input [1:0] RA2;
input [1:0] WA;
input [7:0] WD;
input  WEN;
output sampler_tx;

reg sample;
time current_time;
always @(clk or RA1 or RA2 or WA or WD or WEN)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module RegisterFile_vlg_check_tst (
	RD1,
	RD2,
	t0,
	t1,
	sampler_rx
);
input [7:0] RD1;
input [7:0] RD2;
input [7:0] t0;
input [7:0] t1;
input sampler_rx;

reg [7:0] RD1_expected;
reg [7:0] RD2_expected;
reg [7:0] t0_expected;
reg [7:0] t1_expected;

reg [7:0] RD1_prev;
reg [7:0] RD2_prev;
reg [7:0] t0_prev;
reg [7:0] t1_prev;

reg [7:0] RD1_expected_prev;
reg [7:0] RD2_expected_prev;

reg [7:0] last_RD1_exp;
reg [7:0] last_RD2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	RD1_prev = RD1;
	RD2_prev = RD2;
	t0_prev = t0;
	t1_prev = t1;
end

// update expected /o prevs

always @(trigger)
begin
	RD1_expected_prev = RD1_expected;
	RD2_expected_prev = RD2_expected;
end


// expected RD1[ 7 ]
initial
begin
	RD1_expected[7] = 1'bX;
end 
// expected RD1[ 6 ]
initial
begin
	RD1_expected[6] = 1'bX;
end 
// expected RD1[ 5 ]
initial
begin
	RD1_expected[5] = 1'bX;
end 
// expected RD1[ 4 ]
initial
begin
	RD1_expected[4] = 1'bX;
end 
// expected RD1[ 3 ]
initial
begin
	RD1_expected[3] = 1'bX;
end 
// expected RD1[ 2 ]
initial
begin
	RD1_expected[2] = 1'bX;
end 
// expected RD1[ 1 ]
initial
begin
	RD1_expected[1] = 1'bX;
end 
// expected RD1[ 0 ]
initial
begin
	RD1_expected[0] = 1'bX;
end 
// expected RD2[ 7 ]
initial
begin
	RD2_expected[7] = 1'bX;
end 
// expected RD2[ 6 ]
initial
begin
	RD2_expected[6] = 1'bX;
end 
// expected RD2[ 5 ]
initial
begin
	RD2_expected[5] = 1'bX;
end 
// expected RD2[ 4 ]
initial
begin
	RD2_expected[4] = 1'bX;
end 
// expected RD2[ 3 ]
initial
begin
	RD2_expected[3] = 1'bX;
end 
// expected RD2[ 2 ]
initial
begin
	RD2_expected[2] = 1'bX;
end 
// expected RD2[ 1 ]
initial
begin
	RD2_expected[1] = 1'bX;
end 
// expected RD2[ 0 ]
initial
begin
	RD2_expected[0] = 1'bX;
end 
// generate trigger
always @(RD1_expected or RD1 or RD2_expected or RD2 or t0_expected or t0 or t1_expected or t1)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected RD1 = %b | expected RD2 = %b | expected t0 = %b | expected t1 = %b | ",RD1_expected_prev,RD2_expected_prev,t0_expected_prev,t1_expected_prev);
	$display("| real RD1 = %b | real RD2 = %b | real t0 = %b | real t1 = %b | ",RD1_prev,RD2_prev,t0_prev,t1_prev);
`endif
	if (
		( RD1_expected_prev[0] !== 1'bx ) && ( RD1_prev[0] !== RD1_expected_prev[0] )
		&& ((RD1_expected_prev[0] !== last_RD1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[0] = RD1_expected_prev[0];
	end
	if (
		( RD1_expected_prev[1] !== 1'bx ) && ( RD1_prev[1] !== RD1_expected_prev[1] )
		&& ((RD1_expected_prev[1] !== last_RD1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[1] = RD1_expected_prev[1];
	end
	if (
		( RD1_expected_prev[2] !== 1'bx ) && ( RD1_prev[2] !== RD1_expected_prev[2] )
		&& ((RD1_expected_prev[2] !== last_RD1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[2] = RD1_expected_prev[2];
	end
	if (
		( RD1_expected_prev[3] !== 1'bx ) && ( RD1_prev[3] !== RD1_expected_prev[3] )
		&& ((RD1_expected_prev[3] !== last_RD1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[3] = RD1_expected_prev[3];
	end
	if (
		( RD1_expected_prev[4] !== 1'bx ) && ( RD1_prev[4] !== RD1_expected_prev[4] )
		&& ((RD1_expected_prev[4] !== last_RD1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[4] = RD1_expected_prev[4];
	end
	if (
		( RD1_expected_prev[5] !== 1'bx ) && ( RD1_prev[5] !== RD1_expected_prev[5] )
		&& ((RD1_expected_prev[5] !== last_RD1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[5] = RD1_expected_prev[5];
	end
	if (
		( RD1_expected_prev[6] !== 1'bx ) && ( RD1_prev[6] !== RD1_expected_prev[6] )
		&& ((RD1_expected_prev[6] !== last_RD1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[6] = RD1_expected_prev[6];
	end
	if (
		( RD1_expected_prev[7] !== 1'bx ) && ( RD1_prev[7] !== RD1_expected_prev[7] )
		&& ((RD1_expected_prev[7] !== last_RD1_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[7] = RD1_expected_prev[7];
	end
	if (
		( RD2_expected_prev[0] !== 1'bx ) && ( RD2_prev[0] !== RD2_expected_prev[0] )
		&& ((RD2_expected_prev[0] !== last_RD2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[0] = RD2_expected_prev[0];
	end
	if (
		( RD2_expected_prev[1] !== 1'bx ) && ( RD2_prev[1] !== RD2_expected_prev[1] )
		&& ((RD2_expected_prev[1] !== last_RD2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[1] = RD2_expected_prev[1];
	end
	if (
		( RD2_expected_prev[2] !== 1'bx ) && ( RD2_prev[2] !== RD2_expected_prev[2] )
		&& ((RD2_expected_prev[2] !== last_RD2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[2] = RD2_expected_prev[2];
	end
	if (
		( RD2_expected_prev[3] !== 1'bx ) && ( RD2_prev[3] !== RD2_expected_prev[3] )
		&& ((RD2_expected_prev[3] !== last_RD2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[3] = RD2_expected_prev[3];
	end
	if (
		( RD2_expected_prev[4] !== 1'bx ) && ( RD2_prev[4] !== RD2_expected_prev[4] )
		&& ((RD2_expected_prev[4] !== last_RD2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[4] = RD2_expected_prev[4];
	end
	if (
		( RD2_expected_prev[5] !== 1'bx ) && ( RD2_prev[5] !== RD2_expected_prev[5] )
		&& ((RD2_expected_prev[5] !== last_RD2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[5] = RD2_expected_prev[5];
	end
	if (
		( RD2_expected_prev[6] !== 1'bx ) && ( RD2_prev[6] !== RD2_expected_prev[6] )
		&& ((RD2_expected_prev[6] !== last_RD2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[6] = RD2_expected_prev[6];
	end
	if (
		( RD2_expected_prev[7] !== 1'bx ) && ( RD2_prev[7] !== RD2_expected_prev[7] )
		&& ((RD2_expected_prev[7] !== last_RD2_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[7] = RD2_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module RegisterFile_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [1:0] RA1;
reg [1:0] RA2;
reg [1:0] WA;
reg [7:0] WD;
reg WEN;
// wires                                               
wire [7:0] RD1;
wire [7:0] RD2;
wire [7:0] t0;
wire [7:0] t1;

wire sampler;                             

// assign statements (if any)                          
RegisterFile i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.RA1(RA1),
	.RA2(RA2),
	.RD1(RD1),
	.RD2(RD2),
	.t0(t0),
	.t1(t1),
	.WA(WA),
	.WD(WD),
	.WEN(WEN)
);

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 
// RA1[ 1 ]
initial
begin
	RA1[1] = 1'b0;
end 
// RA1[ 0 ]
initial
begin
	RA1[0] = 1'b0;
	RA1[0] = #260000 1'b1;
	RA1[0] = #40000 1'b0;
end 
// RA2[ 1 ]
initial
begin
	RA2[1] = 1'b0;
	RA2[1] = #260000 1'b1;
	RA2[1] = #40000 1'b0;
end 
// RA2[ 0 ]
initial
begin
	RA2[0] = 1'b0;
	RA2[0] = #60000 1'b1;
	RA2[0] = #40000 1'b0;
	RA2[0] = #160000 1'b1;
	RA2[0] = #40000 1'b0;
end 
// WA[ 1 ]
initial
begin
	WA[1] = 1'b0;
	WA[1] = #140000 1'b1;
	WA[1] = #20000 1'b0;
end 
// WA[ 0 ]
initial
begin
	WA[0] = 1'b0;
	WA[0] = #60000 1'b1;
	WA[0] = #40000 1'b0;
	WA[0] = #40000 1'b1;
	WA[0] = #20000 1'b0;
	WA[0] = #20000 1'b1;
	WA[0] = #20000 1'b0;
end 
// WD[ 7 ]
initial
begin
	WD[7] = 1'b0;
end 
// WD[ 6 ]
initial
begin
	WD[6] = 1'b0;
end 
// WD[ 5 ]
initial
begin
	WD[5] = 1'b0;
end 
// WD[ 4 ]
initial
begin
	WD[4] = 1'b0;
end 
// WD[ 3 ]
initial
begin
	WD[3] = 1'b0;
	WD[3] = #60000 1'b1;
	WD[3] = #80000 1'b0;
	WD[3] = #700000 1'b1;
end 
// WD[ 2 ]
initial
begin
	WD[2] = 1'b0;
	WD[2] = #60000 1'b1;
	WD[2] = #40000 1'b0;
end 
// WD[ 1 ]
initial
begin
	WD[1] = 1'b0;
	WD[1] = #60000 1'b1;
	WD[1] = #80000 1'b0;
	WD[1] = #700000 1'b1;
end 
// WD[ 0 ]
initial
begin
	WD[0] = 1'b0;
	WD[0] = #60000 1'b1;
	WD[0] = #80000 1'b0;
	WD[0] = #700000 1'b1;
end 

// WEN
initial
begin
	WEN = 1'b0;
	WEN = #60000 1'b1;
	WEN = #40000 1'b0;
end 

RegisterFile_vlg_sample_tst tb_sample (
	.clk(clk),
	.RA1(RA1),
	.RA2(RA2),
	.WA(WA),
	.WD(WD),
	.WEN(WEN),
	.sampler_tx(sampler)
);

RegisterFile_vlg_check_tst tb_out(
	.RD1(RD1),
	.RD2(RD2),
	.t0(t0),
	.t1(t1),
	.sampler_rx(sampler)
);
endmodule

